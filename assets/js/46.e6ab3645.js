(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{481:function(s,t,a){"use strict";a.r(t);var n=a(2),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"辗转相除法与裴蜀定理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#辗转相除法与裴蜀定理"}},[s._v("#")]),s._v(" 辗转相除法与裴蜀定理")]),s._v(" "),t("h3",{attrs:{id:"_1、-辗转相除法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、-辗转相除法"}},[s._v("#")]),s._v(" 1、 辗转相除法")]),s._v(" "),t("p",[s._v("​\t关于辗转相除法求最大公约数在算法题中也算常见，但是笔者一直是在记公式，这就导致了长时间不接触相关题目后很难流畅写出求最大公约数的代码，此次笔者记录下辗转相除法的推导与证明。")]),s._v(" "),t("p",[s._v("​\t记 d 为 正整数 a 和 正整数 b 的最大公因数，记 "),t("code",[s._v("a = k * b + r")]),s._v(" (假设a > b)，则"),t("code",[s._v("r = a - k * b")]),s._v(",因为d可以整除 a b，即a b都是d的倍数，那么 r 也一定是 d 的倍数，那么 a 和 b的最大公因数 一定等于 b 和 r 的最大公因数，即"),t("code",[s._v("gcd(a,b) = gcd(b, a % b)")]),s._v("。此时我们会疑惑 "),t("code",[s._v("在递归过程中我们并不知道 a b 之间的大小关系")]),s._v("，假设a < b 那么 "),t("code",[s._v("gcd(a,b) == gcd (b,a % b) = gcd(b,a)")]),s._v(" ，故无须纠结于a,b的大小关系，当 b = 0 时，递归结束，此时的a值即为答案。")]),s._v(" "),t("p",[s._v("​\t代码实现如下：")]),s._v(" "),t("div",{staticClass:"language-cpp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("gcd")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("gcd")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h3",{attrs:{id:"_2、-裴蜀定理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、-裴蜀定理"}},[s._v("#")]),s._v(" 2、 裴蜀定理")]),s._v(" "),t("p",[s._v("​\t关于裴蜀定理：")]),s._v(" "),t("blockquote",[t("p",[s._v("对于不全为0的任意整数，记 "),t("code",[s._v("g = gcd(a,b)")]),s._v("， 则对于任意整数 "),t("code",[s._v("x 和 y")]),s._v("都满足 "),t("code",[s._v("a * x + b * y 为 g 的倍数")]),s._v("，特别地，存在"),t("code",[s._v("x y")]),s._v("满足"),t("code",[s._v("a * x + b * y = g")])])]),s._v(" "),t("p",[s._v("​\t裴蜀定理也可以推广到n个整数：")]),s._v(" "),t("blockquote",[t("p",[s._v("记 "),t("code",[s._v("a1 a2 ... an")]),s._v("的最大公约数为 g ，则对于任意n个整数"),t("code",[s._v("x1 x2 ... xn")]),s._v(" 分别与"),t("code",[s._v("a1 a2 ..... an")]),s._v("的乘积和一定是"),t("code",[s._v("g")]),s._v("的倍数，且存在这样的n个数，其与"),t("code",[s._v("a1 a2 ... an")]),s._v("的乘积和为 g")]),s._v(" "),t("p",[s._v("由此可到一推论："),t("code",[s._v("a1 a2 .... an")]),s._v("的最大公因数为"),t("code",[s._v("g")]),s._v("的充分必要条件为 存在"),t("code",[s._v("x1 x2 ... xn")]),s._v(" 与 "),t("code",[s._v("a1 a2 ... an")]),s._v("的乘积和为 "),t("strong",[s._v("g")])])]),s._v(" "),t("p",[s._v("​\t例题：")]),s._v(" "),t("p",[s._v("​\t"),t("a",{attrs:{href:"https://leetcode.cn/problems/check-if-it-is-a-good-array/description/",target:"_blank",rel:"noopener noreferrer"}},[s._v("检查好数组"),t("OutboundLink")],1)]),s._v(" "),t("p",[s._v("​\t代码：")]),s._v(" "),t("div",{staticClass:"language-cpp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Solution")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("gcd")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("gcd")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("bool")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("isGoodArray")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("vector"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" nums"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 裴蜀定理 判断所有数的最大公约数是否为1即可")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" ans "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" nums"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" ans "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("gcd")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" ans"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" ans "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])])])}),[],!1,null,null,null);t.default=e.exports}}]);